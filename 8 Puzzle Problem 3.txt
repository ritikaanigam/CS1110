Created by: Ritika Nigam (2017btechcse216)

import random
import math

_goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def index:
 
 if item in seq:
 return seq.index
 else:
 return -1

class EightPuzzle:

 def __init__:
 
 self._hval = 0
 
 self._depth = 0
 
 self._parent = None
 self.adj_matrix = []
 for i in range:
 self.adj_matrix.append

 def __eq__:
 if self.__class__ != other.__class__:
 return False
 else:
 return self.adj_matrix == other.adj_matrix

 def __str__:
 res = ''
 for row in range:
 res += ' '.join
 res += '\r\n'
 return res

 def _clone:
 p = EightPuzzle
 for i in range:
 p.adj_matrix[i] = self.adj_matrix[i][:]
 return p

 def _get_legal_moves:
 
 
 row, 2:
            free.append((row + 1, col))
        if col < 2:
            free.append((row, col + 1))

        return free

    def _generate_moves(self):
        free = self._get_legal_moves()
        zero = self.find(0)

        def swap_and_clone(a, b):
            p = self._clone()
            p.swap(a,b)
            p._depth = self._depth + 1
            p._parent = self
            return p

        return map(lambda pair: swap_and_clone(zero, pair), free)

    def _generate_solution_path(self, path):
        if self._parent == None:
            return path
        else:
            path.append(self)
            return self._parent._generate_solution_path(path)

    def solve(self, h):
       
        def is_solved(puzzle):
            return puzzle.adj_matrix == _goal_state

        openl = [self]
        closedl = []
        move_count = 0
        while len(openl), copy._hval + copy._depth:
                       
                        copy._hval = hval
                        copy._parent = move._parent
                        copy._depth = move._depth
                elif idx_closed  copy._hval + copy._depth:
                        move._hval = hval
                        closedl.remove(copy)
                        openl.append(move)

            closedl.append(x)
            openl = sorted(openl, key=lambda p: p._hval + p._depth)

       
        return [], 0

    def shuffle(self, step_count):
        for i in range(step_count):
            row, col = self.find(0)
            free = self._get_legal_moves()
            target = random.choice(free)
            self.swap((row, col), target)            
            row, col = target

    def find(self, value):
       
        if value < 0 or value, 0:
                target_row = 2

            t += item_total_calc(row, target_row, col, target_col)

    return total_calc(t)



def h_manhattan(puzzle):
    return heur(puzzle,
                lambda r, tr, c, tc: abs(tr - r) + abs(tc - c),
                lambda t : t)

def h_manhattan_lsq(puzzle):
    return heur(puzzle,
                lambda r, tr, c, tc: (abs(tr - r) + abs(tc - c))**2,
                lambda t: math.sqrt(t))

def h_linear(puzzle):
    return heur(puzzle,
                lambda r, tr, c, tc: math.sqrt(math.sqrt((tr - r)**2 + (tc - c)**2)),
                lambda t: t)

def h_linear_lsq(puzzle):
    return heur(puzzle,
                lambda r, tr, c, tc: (tr - r)**2 + (tc - c)**2,
                lambda t: math.sqrt(t))

def h_default(puzzle):
    return 0

def main():
    p = EightPuzzle()
    p.shuffle(20)
    print (p)

    path, count = p.solve(h_manhattan)
    path.reverse()
    for i in path:
        print (i)

    print ("Solved with Manhattan distance exploring", count, "states")
    path, count = p.solve(h_manhattan_lsq)
    print ("Solved with Manhattan least squares exploring", count, "states")
    path, count = p.solve(h_linear)
    print ("Solved with linear distance exploring", count, "states")
    path, count = p.solve(h_linear_lsq)
    print ("Solved with linear least squares exploring", count, "states")
#    path, count = p.solve(heur_default)
#    print "Solved with BFS-equivalent in", count, "moves"

if __name__ == "__main__":
    main(),